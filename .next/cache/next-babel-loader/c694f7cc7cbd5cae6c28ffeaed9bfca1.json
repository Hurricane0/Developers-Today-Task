{"ast":null,"code":"// import { store } from \"../store\";\n// import withRedux from \"next-redux-wrapper\";\n// import App from \"next/app\";\n// import { Provider } from \"react-redux\";\n// import React from \"react\";\n// class MyApp extends App {\n//   static async getInitialProps({ Component, ctx }) {\n//     const pageProps = Component.getInitialProps\n//       ? await Component.getInitialProps(ctx)\n//       : {};\n//     //Anything returned here can be accessed by the client\n//     return { pageProps: pageProps };\n//   }\n//   render() {\n//     //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\n//     const { Component, pageProps, store } = this.props;\n//     return (\n//       <Provider store={store}>\n//         <Layout {...pageProps} />\n//       </Provider>\n//     );\n//   }\n// }\n// //makeStore function that returns a new store for every request\n// const makeStore = () => store;\n// //withRedux wrapper that passes the store to the App Component\n// export default withRedux(makeStore)(MyApp);","map":{"version":3,"sources":["C:/Users/user/Programming/Tasks/DevelopersToday/pages/_app.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// import { store } from \"../store\";\r\n// import withRedux from \"next-redux-wrapper\";\r\n// import App from \"next/app\";\r\n// import { Provider } from \"react-redux\";\r\n// import React from \"react\";\r\n\r\n// class MyApp extends App {\r\n//   static async getInitialProps({ Component, ctx }) {\r\n//     const pageProps = Component.getInitialProps\r\n//       ? await Component.getInitialProps(ctx)\r\n//       : {};\r\n\r\n//     //Anything returned here can be accessed by the client\r\n//     return { pageProps: pageProps };\r\n//   }\r\n\r\n//   render() {\r\n//     //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\r\n//     const { Component, pageProps, store } = this.props;\r\n\r\n//     return (\r\n//       <Provider store={store}>\r\n//         <Layout {...pageProps} />\r\n//       </Provider>\r\n//     );\r\n//   }\r\n// }\r\n// //makeStore function that returns a new store for every request\r\n// const makeStore = () => store;\r\n\r\n// //withRedux wrapper that passes the store to the App Component\r\n// export default withRedux(makeStore)(MyApp);\r\n"]},"metadata":{},"sourceType":"script"}