{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleware from \"redux-thunk\";\nconst initialState = {\n  posts: [// { id: 1, postText: \"It is the first post\" },\n    // { id: 2, postText: \"There is the second post\" },\n    // { id: 3, postText: \"The third post!\" }\n  ]\n};\nexport const actionTypes = {\n  ADD: \"ADD\",\n  DELETE: \"DELETE\"\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD:\n      return _objectSpread({}, state, {\n        posts: [...state.posts, {\n          id: 4,\n          postText: action.payload\n        }]\n      });\n\n    default:\n      return state;\n  }\n};\nexport const addPost = text => dispatch => {\n  return dispatch({\n    type: actionTypes.ADD,\n    payload: text\n  });\n};\nexport const initStore = (store = initialState) => {\n  createStore(reducer, store, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n};","map":{"version":3,"sources":["C:/Users/user/Programming/Tasks/DevelopersToday/store.ts"],"names":["createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","initialState","posts","actionTypes","ADD","DELETE","reducer","state","action","type","id","postText","payload","addPost","text","dispatch","initStore","store"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CACL;AACA;AACA;AAHK;AADY,CAArB;AAQA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,GAAG,EAAE,KADoB;AAEzBC,EAAAA,MAAM,EAAE;AAFiB,CAApB;AAKP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACC,GAAjB;AACE,+BACKG,KADL;AAEEL,QAAAA,KAAK,EAAE,CACL,GAAGK,KAAK,CAACL,KADJ,EAEL;AACEQ,UAAAA,EAAE,EAAE,CADN;AAEEC,UAAAA,QAAQ,EAAEH,MAAM,CAACI;AAFnB,SAFK;AAFT;;AAUF;AACE,aAAOL,KAAP;AAbJ;AAeD,CAhBM;AAkBP,OAAO,MAAMM,OAAO,GAAGC,IAAI,IAAIC,QAAQ,IAAI;AACzC,SAAOA,QAAQ,CAAC;AAAEN,IAAAA,IAAI,EAAEN,WAAW,CAACC,GAApB;AAAyBQ,IAAAA,OAAO,EAAEE;AAAlC,GAAD,CAAf;AACD,CAFM;AAIP,OAAO,MAAME,SAAS,GAAG,CAACC,KAAK,GAAGhB,YAAT,KAA0B;AACjDJ,EAAAA,WAAW,CACTS,OADS,EAETW,KAFS,EAGTlB,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAHV,CAAX;AAKD,CANM","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst initialState = {\r\n  posts: [\r\n    // { id: 1, postText: \"It is the first post\" },\r\n    // { id: 2, postText: \"There is the second post\" },\r\n    // { id: 3, postText: \"The third post!\" }\r\n  ]\r\n};\r\n\r\nexport const actionTypes = {\r\n  ADD: \"ADD\",\r\n  DELETE: \"DELETE\"\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD:\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts,\r\n          {\r\n            id: 4,\r\n            postText: action.payload\r\n          }\r\n        ]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const addPost = text => dispatch => {\r\n  return dispatch({ type: actionTypes.ADD, payload: text });\r\n};\r\n\r\nexport const initStore = (store = initialState) => {\r\n  createStore(\r\n    reducer,\r\n    store,\r\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}