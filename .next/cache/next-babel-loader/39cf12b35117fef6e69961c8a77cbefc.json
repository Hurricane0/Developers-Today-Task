{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar SET_POSTS = \"posts/SET_POSTS\";\nvar SET_CURRENT_COMMENTS = \"posts/SET_CURRENT_COMMENTS\";\nvar SET_IS_FETCHING = \"posts/SET_IS_FETCHING\";\nimport { postsAPI } from \"../../api/api\";\n\nvar setPosts = function setPosts(posts) {\n  return {\n    type: SET_POSTS,\n    payload: posts\n  };\n};\n\nvar setCurrentComments = function setCurrentComments(comments) {\n  return {\n    type: SET_CURRENT_COMMENTS,\n    payload: comments\n  };\n};\n\nvar setIsFetching = function setIsFetching(isFetching) {\n  return {\n    type: SET_IS_FETCHING,\n    payload: isFetching\n  };\n};\n\nexport var getPosts = function getPosts() {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(postsAPI.getPosts());\n\n          case 3:\n            response = _context.sent;\n            dispatch(setPosts(response));\n            _context.next = 9;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var getCurrentComments = function getCurrentComments(id) {\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(postsAPI.getComments(id));\n\n          case 2:\n            response = _context2.sent;\n            dispatch(setCurrentComments(response));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createPost = function createPost(title, body) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch(setIsFetching(true));\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(postsAPI.createPost(title, body));\n\n          case 3:\n            dispatch(setIsFetching(false));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Programming/Tasks/DevelopersToday/src/actions/postsActions.ts"],"names":["SET_POSTS","SET_CURRENT_COMMENTS","SET_IS_FETCHING","postsAPI","setPosts","posts","type","payload","setCurrentComments","comments","setIsFetching","isFetching","getPosts","dispatch","response","getCurrentComments","id","getComments","createPost","title","body"],"mappings":";AAAA,IAAMA,SAAS,GAAG,iBAAlB;AACA,IAAMC,oBAAoB,GAAG,4BAA7B;AACA,IAAMC,eAAe,GAAG,uBAAxB;AAEA,SAASC,QAAT,QAAyB,eAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAA2B;AAC1CC,IAAAA,IAAI,EAAEN,SADoC;AAE1CO,IAAAA,OAAO,EAAEF;AAFiC,GAA3B;AAAA,CAAjB;;AAKA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAA8B;AACvDH,IAAAA,IAAI,EAAEL,oBADiD;AAEvDM,IAAAA,OAAO,EAAEE;AAF8C,GAA9B;AAAA,CAA3B;;AAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD;AAAA,SAA0B;AAC9CL,IAAAA,IAAI,EAAEJ,eADwC;AAE9CK,IAAAA,OAAO,EAAEI;AAFqC,GAA1B;AAAA,CAAtB;;AAKA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEHV,QAAQ,CAACS,QAAT,EAFG;;AAAA;AAEpBE,YAAAA,QAFoB;AAG1BD,YAAAA,QAAQ,CAACT,QAAQ,CAACU,QAAD,CAAT,CAAR;AAH0B;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAjB;AAOP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,EAAD;AAAA,SAAgB,kBAAMH,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACzBV,QAAQ,CAACc,WAAT,CAAqBD,EAArB,CADyB;;AAAA;AAC1CF,YAAAA,QAD0C;AAEhDD,YAAAA,QAAQ,CAACL,kBAAkB,CAACM,QAAD,CAAnB,CAAR;;AAFgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;AAAA,CAA3B;AAKP,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAgBC,IAAhB;AAAA,SAAiC,kBAAMP,QAAN;AAAA;AAAA;AAAA;AAAA;AACzDA,YAAAA,QAAQ,CAACH,aAAa,CAAC,IAAD,CAAd,CAAR;AADyD;AAAA,6CAEnDP,QAAQ,CAACe,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,CAFmD;;AAAA;AAGzDP,YAAAA,QAAQ,CAACH,aAAa,CAAC,KAAD,CAAd,CAAR;;AAHyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;AAAA,CAAnB","sourcesContent":["const SET_POSTS = \"posts/SET_POSTS\";\r\nconst SET_CURRENT_COMMENTS = \"posts/SET_CURRENT_COMMENTS\";\r\nconst SET_IS_FETCHING = \"posts/SET_IS_FETCHING\";\r\n\r\nimport { postsAPI } from \"../../api/api\";\r\n\r\nconst setPosts = (posts: Array<Object>) => ({\r\n  type: SET_POSTS,\r\n  payload: posts\r\n});\r\n\r\nconst setCurrentComments = (comments: Array<Object>) => ({\r\n  type: SET_CURRENT_COMMENTS,\r\n  payload: comments\r\n});\r\n\r\nconst setIsFetching = (isFetching: boolean) => ({\r\n  type: SET_IS_FETCHING,\r\n  payload: isFetching\r\n});\r\n\r\nexport const getPosts = () => async (dispatch: Function) => {\r\n  try {\r\n    const response = await postsAPI.getPosts();\r\n    dispatch(setPosts(response));\r\n  } catch (error) {}\r\n};\r\n\r\nexport const getCurrentComments = (id: string) => async dispatch => {\r\n  const response = await postsAPI.getComments(id);\r\n  dispatch(setCurrentComments(response));\r\n};\r\n\r\nexport const createPost = (title: string, body: string) => async dispatch => {\r\n  dispatch(setIsFetching(true));\r\n  await postsAPI.createPost(title, body);\r\n  dispatch(setIsFetching(false));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}