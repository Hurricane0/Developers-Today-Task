{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Programming\\\\Tasks\\\\DevelopersToday\\\\components\\\\CreatePost.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Error from \"./FormErrors\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport cn from \"classnames\";\nimport { createPost } from \"../src/actions/postsActions\";\nimport Router from \"next/router\"; //Validation schema from Yup\n\nvar validationSchema = Yup.object().shape({\n  title: Yup.string().min(1, \"Must have a character\").max(50, \"Must be shorter than 50\").required(\"Title is required\"),\n  body: Yup.string().min(1, \"Must have a character\").max(50, \"Must be shorter than 50\").required(\"Text is required\")\n});\nexport default function App() {\n  var _this = this;\n\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: \"\",\n      body: \"\"\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting;\n      setSubmitting(true);\n      createPost(values.title, values.body);\n      Router.push(\"/\");\n      setSubmitting(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        isSubmitting = _ref2.isSubmitting;\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, \"Post title\"), __jsx(\"input\", {\n      id: \"title\",\n      value: values.title,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: cn(\"form-control\", {\n        \"is-invalid\": touched.title && errors.title,\n        \"is-valid\": touched.title\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }), __jsx(Error, {\n      touched: touched.title,\n      error: errors.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    })), __jsx(\"div\", {\n      className: \"form-group\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"body\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, \"Post text\"), __jsx(\"input\", {\n      id: \"body\",\n      value: values.body,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: cn(\"form-control\", {\n        \"is-invalid\": touched.body && errors.body,\n        \"is-valid\": touched.body && !errors.body\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }), __jsx(Error, {\n      touched: touched.body,\n      error: errors.body,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    })), __jsx(\"button\", {\n      disabled: isSubmitting,\n      type: \"submit\",\n      className: \"btn btn-dark\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, \"Submit\"));\n  })));\n} // import React, { useState } from \"react\";\n// import styled from \"styled-components\";\n// import Router from \"next/router\";\n// type InputEvent = React.ChangeEvent<HTMLInputElement>;\n// type FormEvent = React.FormEvent<HTMLFormElement>;\n// type Props = { createPost: Function; isFetching: boolean };\n// const Wrapper = styled.div`\n//   margin-top: 20px;\n// `;\n// const CreatePost = ({ createPost, isFetching }: Props) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [body, setBody] = useState(\"\");\n// const handleSubmit = (e: FormEvent): void => {\n//   e.preventDefault();\n//   if (title.trim && body.trim) {\n//     createPost(title, body);\n//     Router.push(\"/\");\n//   } else {\n//     console.log(\"Characters error\");\n//   }\n// };\n//   return (\n//     <>\n//       <h1 className=\"text-center display-3\">Create your own post</h1>\n//       <Wrapper>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label>Post title</label>\n//             <input\n//               value={title}\n//               onChange={(e: InputEvent) => setTitle(e.target.value)}\n//               type=\"text\"\n//               className=\"form-control\"\n//               id=\"exampleInputEmail1\"\n//               aria-describedby=\"emailHelp\"\n//             />\n//             <small id=\"emailHelp\" className=\"form-text text-muted\">\n//               Your title should be less than 70 characters\n//             </small>\n//           </div>\n//           <div className=\"form-group\">\n//             <label>Post text</label>\n//             <textarea\n//               value={body}\n//               onChange={e => setBody(e.target.value)}\n//               className=\"form-control\"\n//               id=\"exampleFormControlTextarea1\"\n//               rows={3}\n//             ></textarea>\n//           </div>\n//           <button disabled={isFetching} type=\"submit\" className=\"btn btn-dark\">\n//             Submit\n//           </button>\n//         </form>\n//       </Wrapper>\n//     </>\n//   );\n// };\n// export default CreatePost;","map":{"version":3,"sources":["C:/Users/user/Programming/Tasks/DevelopersToday/components/CreatePost.tsx"],"names":["Error","Formik","Yup","cn","createPost","Router","validationSchema","object","shape","title","string","min","max","required","body","App","values","setSubmitting","push","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting"],"mappings":"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","sourcesContent":["import Error from \"./FormErrors\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport cn from \"classnames\";\r\nimport { createPost } from \"../src/actions/postsActions\";\r\nimport Router from \"next/router\";\r\n\r\n//Validation schema from Yup\r\nconst validationSchema = Yup.object().shape({\r\n  title: Yup.string()\r\n    .min(1, \"Must have a character\")\r\n    .max(50, \"Must be shorter than 50\")\r\n    .required(\"Title is required\"),\r\n  body: Yup.string()\r\n    .min(1, \"Must have a character\")\r\n    .max(50, \"Must be shorter than 50\")\r\n    .required(\"Text is required\")\r\n});\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>\r\n        <Formik\r\n          initialValues={{ title: \"\", body: \"\" }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={(values, { setSubmitting }) => {\r\n            setSubmitting(true);\r\n            createPost(values.title, values.body);\r\n            Router.push(\"/\");\r\n            setSubmitting(false);\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting\r\n          }) => (\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Post title</label>\r\n                <input\r\n                  id=\"title\"\r\n                  value={values.title}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={cn(\"form-control\", {\r\n                    \"is-invalid\": touched.title && errors.title,\r\n                    \"is-valid\": touched.title\r\n                  })}\r\n                />\r\n                <Error touched={touched.title} error={errors.title} />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"body\">Post text</label>\r\n                <input\r\n                  id=\"body\"\r\n                  value={values.body}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={cn(\"form-control\", {\r\n                    \"is-invalid\": touched.body && errors.body,\r\n                    \"is-valid\": touched.body && !errors.body\r\n                  })}\r\n                />\r\n                <Error touched={touched.body} error={errors.body} />\r\n              </div>\r\n\r\n              <button\r\n                disabled={isSubmitting}\r\n                type=\"submit\"\r\n                className=\"btn btn-dark\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React, { useState } from \"react\";\r\n// import styled from \"styled-components\";\r\n// import Router from \"next/router\";\r\n\r\n// type InputEvent = React.ChangeEvent<HTMLInputElement>;\r\n// type FormEvent = React.FormEvent<HTMLFormElement>;\r\n// type Props = { createPost: Function; isFetching: boolean };\r\n\r\n// const Wrapper = styled.div`\r\n//   margin-top: 20px;\r\n// `;\r\n\r\n// const CreatePost = ({ createPost, isFetching }: Props) => {\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [body, setBody] = useState(\"\");\r\n\r\n// const handleSubmit = (e: FormEvent): void => {\r\n//   e.preventDefault();\r\n\r\n//   if (title.trim && body.trim) {\r\n//     createPost(title, body);\r\n//     Router.push(\"/\");\r\n//   } else {\r\n//     console.log(\"Characters error\");\r\n//   }\r\n// };\r\n//   return (\r\n//     <>\r\n//       <h1 className=\"text-center display-3\">Create your own post</h1>\r\n//       <Wrapper>\r\n//         <form onSubmit={handleSubmit}>\r\n//           <div className=\"form-group\">\r\n//             <label>Post title</label>\r\n//             <input\r\n//               value={title}\r\n//               onChange={(e: InputEvent) => setTitle(e.target.value)}\r\n//               type=\"text\"\r\n//               className=\"form-control\"\r\n//               id=\"exampleInputEmail1\"\r\n//               aria-describedby=\"emailHelp\"\r\n//             />\r\n//             <small id=\"emailHelp\" className=\"form-text text-muted\">\r\n//               Your title should be less than 70 characters\r\n//             </small>\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label>Post text</label>\r\n//             <textarea\r\n//               value={body}\r\n//               onChange={e => setBody(e.target.value)}\r\n//               className=\"form-control\"\r\n//               id=\"exampleFormControlTextarea1\"\r\n//               rows={3}\r\n//             ></textarea>\r\n//           </div>\r\n//           <button disabled={isFetching} type=\"submit\" className=\"btn btn-dark\">\r\n//             Submit\r\n//           </button>\r\n//         </form>\r\n//       </Wrapper>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default CreatePost;\r\n"]},"metadata":{},"sourceType":"module"}