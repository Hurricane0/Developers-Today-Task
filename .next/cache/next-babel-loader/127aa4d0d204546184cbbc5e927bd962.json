{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Programming\\\\Tasks\\\\DevelopersToday\\\\pages\\\\_app.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { initStore } from \"../store\";\nimport withRedux from \"next-redux-wrapper\";\nimport App from \"next/app\";\nimport { Provider } from \"react-redux\";\nimport React from \"react\";\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {}; //Anything returned here can be accessed by the client\n\n    return {\n      pageProps: pageProps\n    };\n  }\n\n  render() {\n    //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\n    const {\n      Component,\n      pageProps,\n      initStore\n    } = this.props;\n    return __jsx(Provider, {\n      store: initStore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    })));\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => initStore; //withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(makeStore)(MyApp);","map":{"version":3,"sources":["C:/Users/user/Programming/Tasks/DevelopersToday/pages/_app.jsx"],"names":["initStore","withRedux","App","Provider","React","MyApp","getInitialProps","Component","ctx","pageProps","render","props","makeStore"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,UAA1B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBH,GAApB,CAAwB;AACtB,eAAaI,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GACd,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CADQ,GAEd,EAFJ,CAD+C,CAK/C;;AACA,WAAO;AAAEC,MAAAA,SAAS,EAAEA;AAAb,KAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEH,MAAAA,SAAF;AAAaE,MAAAA,SAAb;AAAwBT,MAAAA;AAAxB,QAAsC,KAAKW,KAAjD;AAEA,WACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEX,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,eAAeS,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD;;AAnBqB,C,CAqBxB;;;AACA,MAAMG,SAAS,GAAG,MAAMZ,SAAxB,C,CAEA;;;AACA,eAAeC,SAAS,CAACW,SAAD,CAAT,CAAqBP,KAArB,CAAf","sourcesContent":["import { initStore } from \"../store\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport App from \"next/app\";\r\nimport { Provider } from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nclass MyApp extends App {\r\n  static async getInitialProps({ Component, ctx }) {\r\n    const pageProps = Component.getInitialProps\r\n      ? await Component.getInitialProps(ctx)\r\n      : {};\r\n\r\n    //Anything returned here can be accessed by the client\r\n    return { pageProps: pageProps };\r\n  }\r\n\r\n  render() {\r\n    //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\r\n    const { Component, pageProps, initStore } = this.props;\r\n\r\n    return (\r\n      <Provider store={initStore}>\r\n        <Component {...pageProps} />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n//makeStore function that returns a new store for every request\r\nconst makeStore = () => initStore;\r\n\r\n//withRedux wrapper that passes the store to the App Component\r\nexport default withRedux(makeStore)(MyApp);\r\n"]},"metadata":{},"sourceType":"module"}